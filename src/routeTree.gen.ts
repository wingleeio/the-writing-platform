/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as BookCreateImport } from './routes/book.create'
import { Route as BookIdImport } from './routes/book.$id'
import { Route as AuthorIdImport } from './routes/author.$id'
import { Route as BookIdIndexImport } from './routes/book.$id.index'
import { Route as AuthorIdIndexImport } from './routes/author.$id.index'
import { Route as BookIdEditImport } from './routes/book_.$id.edit'
import { Route as BookIdCreateImport } from './routes/book_.$id.create'
import { Route as BookIdReviewsImport } from './routes/book.$id.reviews'
import { Route as AuthorIdEditImport } from './routes/author.$id.edit'
import { Route as AuthorIdBooksImport } from './routes/author.$id.books'
import { Route as BookIdChapterChapterIdImport } from './routes/book_.$id.chapter.$chapterId'
import { Route as BookIdChapterChapterIdEditImport } from './routes/book_.$id.chapter_.$chapterId.edit'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BookCreateRoute = BookCreateImport.update({
  id: '/book/create',
  path: '/book/create',
  getParentRoute: () => rootRoute,
} as any)

const BookIdRoute = BookIdImport.update({
  id: '/book/$id',
  path: '/book/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthorIdRoute = AuthorIdImport.update({
  id: '/author/$id',
  path: '/author/$id',
  getParentRoute: () => rootRoute,
} as any)

const BookIdIndexRoute = BookIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BookIdRoute,
} as any)

const AuthorIdIndexRoute = AuthorIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthorIdRoute,
} as any)

const BookIdEditRoute = BookIdEditImport.update({
  id: '/book_/$id/edit',
  path: '/book/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

const BookIdCreateRoute = BookIdCreateImport.update({
  id: '/book_/$id/create',
  path: '/book/$id/create',
  getParentRoute: () => rootRoute,
} as any)

const BookIdReviewsRoute = BookIdReviewsImport.update({
  id: '/reviews',
  path: '/reviews',
  getParentRoute: () => BookIdRoute,
} as any)

const AuthorIdEditRoute = AuthorIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => AuthorIdRoute,
} as any)

const AuthorIdBooksRoute = AuthorIdBooksImport.update({
  id: '/books',
  path: '/books',
  getParentRoute: () => AuthorIdRoute,
} as any)

const BookIdChapterChapterIdRoute = BookIdChapterChapterIdImport.update({
  id: '/book_/$id/chapter/$chapterId',
  path: '/book/$id/chapter/$chapterId',
  getParentRoute: () => rootRoute,
} as any)

const BookIdChapterChapterIdEditRoute = BookIdChapterChapterIdEditImport.update(
  {
    id: '/book_/$id/chapter_/$chapterId/edit',
    path: '/book/$id/chapter/$chapterId/edit',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/author/$id': {
      id: '/author/$id'
      path: '/author/$id'
      fullPath: '/author/$id'
      preLoaderRoute: typeof AuthorIdImport
      parentRoute: typeof rootRoute
    }
    '/book/$id': {
      id: '/book/$id'
      path: '/book/$id'
      fullPath: '/book/$id'
      preLoaderRoute: typeof BookIdImport
      parentRoute: typeof rootRoute
    }
    '/book/create': {
      id: '/book/create'
      path: '/book/create'
      fullPath: '/book/create'
      preLoaderRoute: typeof BookCreateImport
      parentRoute: typeof rootRoute
    }
    '/author/$id/books': {
      id: '/author/$id/books'
      path: '/books'
      fullPath: '/author/$id/books'
      preLoaderRoute: typeof AuthorIdBooksImport
      parentRoute: typeof AuthorIdImport
    }
    '/author/$id/edit': {
      id: '/author/$id/edit'
      path: '/edit'
      fullPath: '/author/$id/edit'
      preLoaderRoute: typeof AuthorIdEditImport
      parentRoute: typeof AuthorIdImport
    }
    '/book/$id/reviews': {
      id: '/book/$id/reviews'
      path: '/reviews'
      fullPath: '/book/$id/reviews'
      preLoaderRoute: typeof BookIdReviewsImport
      parentRoute: typeof BookIdImport
    }
    '/book_/$id/create': {
      id: '/book_/$id/create'
      path: '/book/$id/create'
      fullPath: '/book/$id/create'
      preLoaderRoute: typeof BookIdCreateImport
      parentRoute: typeof rootRoute
    }
    '/book_/$id/edit': {
      id: '/book_/$id/edit'
      path: '/book/$id/edit'
      fullPath: '/book/$id/edit'
      preLoaderRoute: typeof BookIdEditImport
      parentRoute: typeof rootRoute
    }
    '/author/$id/': {
      id: '/author/$id/'
      path: '/'
      fullPath: '/author/$id/'
      preLoaderRoute: typeof AuthorIdIndexImport
      parentRoute: typeof AuthorIdImport
    }
    '/book/$id/': {
      id: '/book/$id/'
      path: '/'
      fullPath: '/book/$id/'
      preLoaderRoute: typeof BookIdIndexImport
      parentRoute: typeof BookIdImport
    }
    '/book_/$id/chapter/$chapterId': {
      id: '/book_/$id/chapter/$chapterId'
      path: '/book/$id/chapter/$chapterId'
      fullPath: '/book/$id/chapter/$chapterId'
      preLoaderRoute: typeof BookIdChapterChapterIdImport
      parentRoute: typeof rootRoute
    }
    '/book_/$id/chapter_/$chapterId/edit': {
      id: '/book_/$id/chapter_/$chapterId/edit'
      path: '/book/$id/chapter/$chapterId/edit'
      fullPath: '/book/$id/chapter/$chapterId/edit'
      preLoaderRoute: typeof BookIdChapterChapterIdEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthorIdRouteChildren {
  AuthorIdBooksRoute: typeof AuthorIdBooksRoute
  AuthorIdEditRoute: typeof AuthorIdEditRoute
  AuthorIdIndexRoute: typeof AuthorIdIndexRoute
}

const AuthorIdRouteChildren: AuthorIdRouteChildren = {
  AuthorIdBooksRoute: AuthorIdBooksRoute,
  AuthorIdEditRoute: AuthorIdEditRoute,
  AuthorIdIndexRoute: AuthorIdIndexRoute,
}

const AuthorIdRouteWithChildren = AuthorIdRoute._addFileChildren(
  AuthorIdRouteChildren,
)

interface BookIdRouteChildren {
  BookIdReviewsRoute: typeof BookIdReviewsRoute
  BookIdIndexRoute: typeof BookIdIndexRoute
}

const BookIdRouteChildren: BookIdRouteChildren = {
  BookIdReviewsRoute: BookIdReviewsRoute,
  BookIdIndexRoute: BookIdIndexRoute,
}

const BookIdRouteWithChildren =
  BookIdRoute._addFileChildren(BookIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/author/$id': typeof AuthorIdRouteWithChildren
  '/book/$id': typeof BookIdRouteWithChildren
  '/book/create': typeof BookCreateRoute
  '/author/$id/books': typeof AuthorIdBooksRoute
  '/author/$id/edit': typeof AuthorIdEditRoute
  '/book/$id/reviews': typeof BookIdReviewsRoute
  '/book/$id/create': typeof BookIdCreateRoute
  '/book/$id/edit': typeof BookIdEditRoute
  '/author/$id/': typeof AuthorIdIndexRoute
  '/book/$id/': typeof BookIdIndexRoute
  '/book/$id/chapter/$chapterId': typeof BookIdChapterChapterIdRoute
  '/book/$id/chapter/$chapterId/edit': typeof BookIdChapterChapterIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/book/create': typeof BookCreateRoute
  '/author/$id/books': typeof AuthorIdBooksRoute
  '/author/$id/edit': typeof AuthorIdEditRoute
  '/book/$id/reviews': typeof BookIdReviewsRoute
  '/book/$id/create': typeof BookIdCreateRoute
  '/book/$id/edit': typeof BookIdEditRoute
  '/author/$id': typeof AuthorIdIndexRoute
  '/book/$id': typeof BookIdIndexRoute
  '/book/$id/chapter/$chapterId': typeof BookIdChapterChapterIdRoute
  '/book/$id/chapter/$chapterId/edit': typeof BookIdChapterChapterIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/author/$id': typeof AuthorIdRouteWithChildren
  '/book/$id': typeof BookIdRouteWithChildren
  '/book/create': typeof BookCreateRoute
  '/author/$id/books': typeof AuthorIdBooksRoute
  '/author/$id/edit': typeof AuthorIdEditRoute
  '/book/$id/reviews': typeof BookIdReviewsRoute
  '/book_/$id/create': typeof BookIdCreateRoute
  '/book_/$id/edit': typeof BookIdEditRoute
  '/author/$id/': typeof AuthorIdIndexRoute
  '/book/$id/': typeof BookIdIndexRoute
  '/book_/$id/chapter/$chapterId': typeof BookIdChapterChapterIdRoute
  '/book_/$id/chapter_/$chapterId/edit': typeof BookIdChapterChapterIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/author/$id'
    | '/book/$id'
    | '/book/create'
    | '/author/$id/books'
    | '/author/$id/edit'
    | '/book/$id/reviews'
    | '/book/$id/create'
    | '/book/$id/edit'
    | '/author/$id/'
    | '/book/$id/'
    | '/book/$id/chapter/$chapterId'
    | '/book/$id/chapter/$chapterId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/book/create'
    | '/author/$id/books'
    | '/author/$id/edit'
    | '/book/$id/reviews'
    | '/book/$id/create'
    | '/book/$id/edit'
    | '/author/$id'
    | '/book/$id'
    | '/book/$id/chapter/$chapterId'
    | '/book/$id/chapter/$chapterId/edit'
  id:
    | '__root__'
    | '/'
    | '/author/$id'
    | '/book/$id'
    | '/book/create'
    | '/author/$id/books'
    | '/author/$id/edit'
    | '/book/$id/reviews'
    | '/book_/$id/create'
    | '/book_/$id/edit'
    | '/author/$id/'
    | '/book/$id/'
    | '/book_/$id/chapter/$chapterId'
    | '/book_/$id/chapter_/$chapterId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthorIdRoute: typeof AuthorIdRouteWithChildren
  BookIdRoute: typeof BookIdRouteWithChildren
  BookCreateRoute: typeof BookCreateRoute
  BookIdCreateRoute: typeof BookIdCreateRoute
  BookIdEditRoute: typeof BookIdEditRoute
  BookIdChapterChapterIdRoute: typeof BookIdChapterChapterIdRoute
  BookIdChapterChapterIdEditRoute: typeof BookIdChapterChapterIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthorIdRoute: AuthorIdRouteWithChildren,
  BookIdRoute: BookIdRouteWithChildren,
  BookCreateRoute: BookCreateRoute,
  BookIdCreateRoute: BookIdCreateRoute,
  BookIdEditRoute: BookIdEditRoute,
  BookIdChapterChapterIdRoute: BookIdChapterChapterIdRoute,
  BookIdChapterChapterIdEditRoute: BookIdChapterChapterIdEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/author/$id",
        "/book/$id",
        "/book/create",
        "/book_/$id/create",
        "/book_/$id/edit",
        "/book_/$id/chapter/$chapterId",
        "/book_/$id/chapter_/$chapterId/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/author/$id": {
      "filePath": "author.$id.tsx",
      "children": [
        "/author/$id/books",
        "/author/$id/edit",
        "/author/$id/"
      ]
    },
    "/book/$id": {
      "filePath": "book.$id.tsx",
      "children": [
        "/book/$id/reviews",
        "/book/$id/"
      ]
    },
    "/book/create": {
      "filePath": "book.create.tsx"
    },
    "/author/$id/books": {
      "filePath": "author.$id.books.tsx",
      "parent": "/author/$id"
    },
    "/author/$id/edit": {
      "filePath": "author.$id.edit.tsx",
      "parent": "/author/$id"
    },
    "/book/$id/reviews": {
      "filePath": "book.$id.reviews.tsx",
      "parent": "/book/$id"
    },
    "/book_/$id/create": {
      "filePath": "book_.$id.create.tsx"
    },
    "/book_/$id/edit": {
      "filePath": "book_.$id.edit.tsx"
    },
    "/author/$id/": {
      "filePath": "author.$id.index.tsx",
      "parent": "/author/$id"
    },
    "/book/$id/": {
      "filePath": "book.$id.index.tsx",
      "parent": "/book/$id"
    },
    "/book_/$id/chapter/$chapterId": {
      "filePath": "book_.$id.chapter.$chapterId.tsx"
    },
    "/book_/$id/chapter_/$chapterId/edit": {
      "filePath": "book_.$id.chapter_.$chapterId.edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
